<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Screencasts on Go In 5 Minutes</title>
    <link>https://goin5minutes.com/screencast/</link>
    <description>Recent content in Screencasts on Go In 5 Minutes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2019 15:22:28 -0700</lastBuildDate>
    
	<atom:link href="https://goin5minutes.com/screencast/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Fast Web Apps with the Echo Framework!</title>
      <link>https://goin5minutes.com/screencast/episode_31_echo_framework/</link>
      <pubDate>Wed, 04 Sep 2019 15:22:28 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_31_echo_framework/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Learn how to use the &lt;a href=&#34;https://echo.labstack.com/&#34;&gt;Echo&lt;/a&gt; framework to write quick and high-quality web services.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hooking your Buffalo Webapp to a Database</title>
      <link>https://goin5minutes.com/screencast/episode_30_buffalo_pop_basics/</link>
      <pubDate>Thu, 29 Aug 2019 12:07:35 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_30_buffalo_pop_basics/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 30&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another episode in the &lt;a href=&#34;https://gobuffalo.io&#34;&gt;Buffalo&lt;/a&gt; series! We&amp;rsquo;re going to talk about how to use the &lt;a href=&#34;https://github.com/gobuffalo/pop&#34;&gt;pop&lt;/a&gt; library alongside Buffalo to quickly and seamlessly integrate a database into your web application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing Login with GitHub in your Buffalo App</title>
      <link>https://goin5minutes.com/screencast/episode_29_buffalo_login_with_github_using_goth/</link>
      <pubDate>Tue, 13 Aug 2019 10:20:59 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_29_buffalo_login_with_github_using_goth/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 29&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re continuing the &lt;a href=&#34;https://gobuffalo.io&#34;&gt;Buffalo&lt;/a&gt; series! Lots of web apps have a login button, and yours probably will too. This time, we&amp;rsquo;re going to learn how to build one so that your users can login with GitHub.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Modules with the Athens Project!</title>
      <link>https://goin5minutes.com/screencast/episode_28_using_modules_and_athens/</link>
      <pubDate>Fri, 09 Aug 2019 13:10:24 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_28_using_modules_and_athens/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 28&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://www.goin5minutes.com/screencast/episode_27_intro_to_modules/&#34;&gt;episode 27&lt;/a&gt;, we talked about how to use &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; to manage dependencies, but there&amp;rsquo;s more to the story!&lt;/p&gt;

&lt;p&gt;Check out how module servers and Athens fit into the dependencies ecosystem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Go Modules</title>
      <link>https://goin5minutes.com/screencast/episode_27_intro_to_modules/</link>
      <pubDate>Tue, 16 Jul 2019 13:28:20 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_27_intro_to_modules/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 27&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go Modules is a brand new system, but it&amp;rsquo;s &lt;em&gt;the way&lt;/em&gt; we are going to do dependency management in Go, so we all need to be familiar with it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Clients for REST APIs!</title>
      <link>https://goin5minutes.com/screencast/episode_26_writing_rest_clients/</link>
      <pubDate>Tue, 09 Jul 2019 15:42:23 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_26_writing_rest_clients/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 26&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a break from the &lt;a href=&#34;https://goin5minutes.com/screencast/episode_25_buffalo_templating_with_plush/&#34;&gt;Buffalo series&lt;/a&gt; and talk about a &lt;a href=&#34;https://github.com/arschles/go-in-5-minutes/issues/109&#34;&gt;highly requested topic&lt;/a&gt; - how to write clients for REST APIs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Templating with the Buffalo Plush Engine</title>
      <link>https://goin5minutes.com/screencast/episode_25_buffalo_templating_with_plush/</link>
      <pubDate>Tue, 02 Jul 2019 12:50:04 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_25_buffalo_templating_with_plush/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 25&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We learned about resources and more advanced routing last time in episode 24, so let&amp;rsquo;s switch gears and focus on how to actually render something to the browser.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Resource Paths in Buffalo</title>
      <link>https://goin5minutes.com/screencast/episode_24_buffalo_resources/</link>
      <pubDate>Wed, 31 Oct 2018 12:31:07 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_24_buffalo_resources/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 24&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We learned about more advanced path routing in episode 22, and today we&amp;rsquo;re gonna go into Buffalo&amp;rsquo;s resources feature.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Beyond 5 Minutes: Commonly Used, Popular Packages and Frameworks for Real Life Development</title>
      <link>https://goin5minutes.com/screencast/episode_23_popular_packages/</link>
      <pubDate>Sun, 03 Jun 2018 12:57:11 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_23_popular_packages/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 23&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this episode I&amp;rsquo;m coming at you from GopherCon Iceland to talk about
commonly used packages for Go!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advanced Routing with Buffalo - Buffalo Series #2</title>
      <link>https://goin5minutes.com/screencast/episode_22_buffalo_advanced_routing/</link>
      <pubDate>Thu, 24 May 2018 12:57:11 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_22_buffalo_advanced_routing/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 22&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We learned about &lt;a href=&#34;https://gobuffalo.io&#34;&gt;Buffalo&lt;/a&gt; basics in &lt;a href=&#34;https://www.goin5minutes.com/screencast/episode_21_buffalo_intro/&#34;&gt;Episode 21&lt;/a&gt;, and today we&amp;rsquo;re going
to keep the fun going! We&amp;rsquo;re gonna talk about taking advantage of more advanced features
in the Buffalo request router to build more powerful websites.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Buffalo  to Build Awesome Websites</title>
      <link>https://goin5minutes.com/screencast/episode_21_buffalo_intro/</link>
      <pubDate>Fri, 30 Mar 2018 17:28:17 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_21_buffalo_intro/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 21&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How do you build a website with Go? For a while, we all just cobbled something
together with the standard library, Gorilla Mux, and so on. We had to figure a &lt;em&gt;lot&lt;/em&gt; out on
our own. Not anymore! Now we have &lt;a href=&#34;https://gobuffalo.io&#34;&gt;Buffalo&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing with Testify Suite</title>
      <link>https://goin5minutes.com/screencast/episode_20_testing_with_suite/</link>
      <pubDate>Sat, 17 Mar 2018 11:44:01 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_20_testing_with_suite/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 20&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Tests are a &lt;em&gt;huge&lt;/em&gt; part of your codebase and your workflow includes writing lots
of tests (I hope!) We&amp;rsquo;ll talk about how to up your testing game using
&lt;a href=&#34;https://godoc.org/github.com/stretchr/testify/suite&#34;&gt;&lt;code&gt;github.com/stretchr/testify/suite&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why should you use more than just the standard &lt;a href=&#34;https://godoc.org/testing&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt;
package? Under what circumstances? What are the benefits? All covered here!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parsing Arbitrary JSON</title>
      <link>https://goin5minutes.com/screencast/episode_19_parsing_arbitrary_json/</link>
      <pubDate>Mon, 19 Feb 2018 11:44:01 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_19_parsing_arbitrary_json/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 19&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tmcarr&#34;&gt;@tmcarr&lt;/a&gt; requested in
&lt;a href=&#34;https://github.com/arschles/go-in-5-minutes/issues/125&#34;&gt;#125&lt;/a&gt; that I do a screencast
on how to consume json with unknown fields.&lt;/p&gt;

&lt;p&gt;This screencast shows how to exactly that! I&amp;rsquo;ll show how to parse JSON using just the standard
library, and also point folks to a package that will help if you don&amp;rsquo;t want to steal my code
(which is totally fine by the way!)&lt;/p&gt;

&lt;p&gt;Here ya go &lt;a href=&#34;https://github.com/tmcarr&#34;&gt;@tmcarr&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing a Command Line Application using Cobra</title>
      <link>https://goin5minutes.com/screencast/episode_18_cli_with_cobra/</link>
      <pubDate>Sat, 03 Feb 2018 11:44:01 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_18_cli_with_cobra/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 18&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This screencast teaches how to write a command line app in Go. We&amp;rsquo;ll use the
&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;cobra&lt;/a&gt; package, which is my go-to for every command line
app I&amp;rsquo;ve written for the last year.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating and Using Custom Error Types</title>
      <link>https://goin5minutes.com/screencast/episode_17_the_error_interface/</link>
      <pubDate>Sun, 06 Nov 2016 14:53:53 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_17_the_error_interface/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 17&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We explore the &lt;code&gt;error&lt;/code&gt; interface (&lt;a href=&#34;https://godoc.org/builtin#error&#34;&gt;https://godoc.org/builtin#error&lt;/a&gt;) more closely and explain how and why to create custom error types that you can pass wherever an &lt;code&gt;error&lt;/code&gt; is expected.&lt;/p&gt;

&lt;p&gt;We also talk about some best practices in exposing and describing your custom types inside of your libraries and packages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nested Tests</title>
      <link>https://goin5minutes.com/screencast/episode_16_nested_tests/</link>
      <pubDate>Mon, 03 Oct 2016 17:44:43 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_16_nested_tests/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 16&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This screencast shows you how to use Go&amp;rsquo;s Subtests feature. Subtests are new in Go 1.7 and can help you write and organize your code much more easily. They can also help you design and build much more powerful unit and integration tests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simulating an Internet Cafe</title>
      <link>https://goin5minutes.com/screencast/episode_15_internet_cafe/</link>
      <pubDate>Fri, 12 Aug 2016 16:23:48 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_15_internet_cafe/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We finish the &lt;a href=&#34;https://github.com/arschles/go-in-5-minutes/issues/14&#34;&gt;concurrency series&lt;/a&gt; by showing how to solve the &amp;ldquo;Internet Cafe&amp;rdquo; problem on &lt;a href=&#34;http://whipperstacker.com/2015/10/05/3-trivial-concurrency-exercises-for-the-confused-newbie-gopher/&#34;&gt;Trivial Concurrency Exercises for the Confused Newbie Gopher&lt;/a&gt;. The solution we&amp;rsquo;ll show has a bug, however, and the extended screencast fixes it.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://gum.co/gifm-x-15&#34;&gt;https://gum.co/gifm-x-15&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building web pages using the html/template package</title>
      <link>https://goin5minutes.com/screencast/episode_14_using_templates/</link>
      <pubDate>Sun, 24 Jul 2016 15:03:28 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_14_using_templates/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 14&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We show how to do use the the &lt;a href=&#34;https://godoc.org/html/template&#34;&gt;&lt;code&gt;html/template&lt;/code&gt;&lt;/a&gt; package (and its close sibling, &lt;a href=&#34;https://godoc.org/text/template&#34;&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt;). We pay special attention to templating tasks most common to web development like layouts, blocks and partials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the database/sql package</title>
      <link>https://goin5minutes.com/screencast/episode_13_using_database_sql/</link>
      <pubDate>Sun, 15 May 2016 14:45:27 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_13_using_database_sql/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We briefly describe how to use the &lt;code&gt;database/sql&lt;/code&gt; package and show example code on how to do &lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34;&gt;CRUD&lt;/a&gt; actions against a SQL databases using the flexible &lt;a href=&#34;https://godoc.org/database/sql&#34;&gt;&lt;code&gt;database/sql&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Concurrency: Eating Tapas</title>
      <link>https://goin5minutes.com/screencast/episode_12_concurrency_eating_tapas/</link>
      <pubDate>Sun, 17 Jan 2016 15:05:14 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_12_concurrency_eating_tapas/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 12&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We describe the problem #2 on &lt;a href=&#34;http://whipperstacker.com/2015/10/05/3-trivial-concurrency-exercises-for-the-confused-newbie-gopher&#34;&gt;Trivial Concurrency Exercises for the Confused Newbie Gopher&lt;/a&gt; and then present and detail a solution to the problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Structuring JSON APIs in Go</title>
      <link>https://goin5minutes.com/screencast/episode_11_json_apis/</link>
      <pubDate>Sun, 03 Jan 2016 12:37:43 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_11_json_apis/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 11&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We show how to structure and build a complete JSON API in a Go server. This screencast explains basic structuring patterns and concepts and includes code for a complete, working server that simulates a management system for a platform-as-a-service (PaaS).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Concurrency: The Daily Walk</title>
      <link>https://goin5minutes.com/screencast/episode_10_concurrency_the_daily_walk/</link>
      <pubDate>Sun, 13 Dec 2015 14:34:35 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_10_concurrency_the_daily_walk/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 10&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We describe the problem #1 on &lt;a href=&#34;http://whipperstacker.com/2015/10/05/3-trivial-concurrency-exercises-for-the-confused-newbie-gopher&#34;&gt;Trivial Concurrency Exercises for the Confused Newbie Gopher&lt;/a&gt; and then present and detail a solution to the problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Optional Singleton Pattern</title>
      <link>https://goin5minutes.com/screencast/episode_9_the_optional_singleton_pattern/</link>
      <pubDate>Sun, 06 Dec 2015 17:22:36 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_9_the_optional_singleton_pattern/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 9&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We explain what the optional singleton pattern is, how it can make libraries easier to use, and walk through the code for a simple library that uses this pattern.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Profiling Go Programs</title>
      <link>https://goin5minutes.com/screencast/episode_8_profiling/</link>
      <pubDate>Sun, 22 Nov 2015 12:50:10 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_8_profiling/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 8&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We explain why you should profile your programs, how to do it, and (briefly) how you can improve your code based on your profile results.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vendoring Your Dependencies</title>
      <link>https://goin5minutes.com/screencast/episode_7_vendoring_your_dependencies_in_go/</link>
      <pubDate>Mon, 16 Nov 2015 22:10:25 -0700</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_7_vendoring_your_dependencies_in_go/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 7&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We explain what &lt;code&gt;go get&lt;/code&gt; does, and why is isn&amp;rsquo;t sufficient for dependency management. We also explain what a reproducible build is in Go and why it&amp;rsquo;s so important, and explain why vendoring achieves reproducible builds. We then introduce &lt;a href=&#34;https://github.com/Masterminds/glide&#34;&gt;Glide&lt;/a&gt; and show how we&amp;rsquo;d vendor the &lt;a href=&#34;https://github.com/arschles/go-in-5-minutes/tree/master/episode6&#34;&gt;code from episode 6&lt;/a&gt; using the tool.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Unit Tests Against HTTP Handlers</title>
      <link>https://goin5minutes.com/screencast/episode_6_unit_testing_http_handlers/</link>
      <pubDate>Mon, 09 Nov 2015 13:32:59 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_6_unit_testing_http_handlers/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 6&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We show how to write unit tests against HTTP handlers. Using an example API server that proxies the &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;Github API&lt;/a&gt; using &lt;a href=&#34;https://godoc.org/github.com/google/go-github/github&#34;&gt;Google&amp;rsquo;s go-github client library&lt;/a&gt;, we outline and show examples of two methods for testing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building Full Stack Web Applications in Go</title>
      <link>https://goin5minutes.com/screencast/episode_5_building_full_stack_webapps/</link>
      <pubDate>Sun, 01 Nov 2015 15:37:02 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_5_building_full_stack_webapps/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 5&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We explain how to write full featured web applications in Go, which cover a wide variety
of topics. We focus on database communication, rendering templates, and client-server
communication via APIs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Websocket Servers with Gorilla Websockets</title>
      <link>https://goin5minutes.com/screencast/episode_4_websockets_with_gorilla_websocket/</link>
      <pubDate>Sun, 25 Oct 2015 15:36:30 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_4_websockets_with_gorilla_websocket/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 4&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We explain what &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;Websockets&lt;/a&gt; are and why they matter
in modern web development. Then, we show how to build a full featured Websocket server
using the &lt;a href=&#34;https://godoc.org/github.com/gorilla/websocket&#34;&gt;&lt;code&gt;gorilla/websocket&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;The example and sample code shows a complete browser-based chat application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Webapps With Gorilla Mux</title>
      <link>https://goin5minutes.com/screencast/episode_3_writing_webapps_with_gorilla_mux/</link>
      <pubDate>Sat, 17 Oct 2015 15:35:53 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_3_writing_webapps_with_gorilla_mux/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We show how to write more advanced web applications with the &lt;a href=&#34;https://godoc.org/github.com/gorilla/mux&#34;&gt;&lt;code&gt;gorilla/mux&lt;/code&gt;&lt;/a&gt;. We walk through example code that implements
a complex &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt; API and highlights
many of the features of the library.&lt;/p&gt;

&lt;p&gt;This screencast expands on concepts in &lt;a href=&#34;https://goin5minutes.com/screencast/episode_1_building_restful_api_using_only_std_lib&#34;&gt;episode 1&lt;/a&gt;, but you don&amp;rsquo;t need to
watch that screencast to understand this one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debugging Go Programs with godebug</title>
      <link>https://goin5minutes.com/screencast/episode_2_debugging_with_godebug/</link>
      <pubDate>Sat, 17 Oct 2015 15:34:49 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_2_debugging_with_godebug/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We show a semi-complex concurrent program with a bug in it, and then use &lt;a href=&#34;https://github.com/mailgun/godebug&#34;&gt;godebug&lt;/a&gt; to find, diagnose and fix it.&lt;/p&gt;

&lt;p&gt;We also show a few other examples of bugs and show how to find and fix those.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a RESTful API in Go Using Only the Standard Library</title>
      <link>https://goin5minutes.com/screencast/episode_1_building_restful_api_using_only_std_lib/</link>
      <pubDate>Sat, 03 Oct 2015 13:05:57 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_1_building_restful_api_using_only_std_lib/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We show how to write a feature-rich &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt;ful API using only the Go &lt;a href=&#34;https://godoc.org/net/http&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; package in the standard library.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Testable Code and Fast Unit Tests with Mocking</title>
      <link>https://goin5minutes.com/screencast/episode_0_writing_testable_code_and_fast_unit_tests_using_mocking/</link>
      <pubDate>Sat, 26 Sep 2015 16:09:29 -0800</pubDate>
      
      <guid>https://goin5minutes.com/screencast/episode_0_writing_testable_code_and_fast_unit_tests_using_mocking/</guid>
      <description>&lt;p&gt;&lt;em&gt;Episode 0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Welcome to the first Go In 5 Minutes screencast!&lt;/p&gt;

&lt;p&gt;We show how to write code that is extensible and testable and then how to write fast, correct unit tests against it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>